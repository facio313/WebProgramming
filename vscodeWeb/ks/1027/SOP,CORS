SOP(Same Origin Policy, 동일 출처 정책)
 같은 출처(protocol, port, host 일치)에서만 리소스를 공유할 수 있는 규칙
 브라우저 규칙이며, 브라우저 -> 서버로 요청 시 정책이 적용됨
 브라우저를 거치지 않는 서버 간(서버 to 서버) 통신의 경우 정책 적용 안 됨

 CORS(Cross Origin Resource Sharing, 교차 출처 리소스 공유)
  추가 HTTP 헤더를 사용하여 자원에 접근할 수 있는 권한을 부여하고 그 내용을 브라우저에 알리는 체제

정리
 1. 자바스크립트에서 외부 서버로 요청할 경우 SOP 정책에 의해 요청 실패
 2. 정책은 보안을 위한 좋은 방법이지만, 외부호출을 많이 사용하는 대규모 프로젝트 입장에서는 약간 사용이 번거로움
 3. 위 사항을 극복하기 위해 추가 정책인 CORS가 등장 => 서버에서 일부를 허용하는 방식
 4. 서버의 도움 없이 회피하고자 하는 방식들이 존재
    * 브라우저 실행 시 외부 요청을 허용하는 옵션 사용하기
    * 외부 요청을 가능하게 하는 플러그인 설치
    * JSONP 방식 사용
    * 서버 우회
    * 대리 서버(proxy)를 통한 우회
 5. 서버를 제어해 브라우저와 서버 간 통신을 가능하게 하는 CORS 적용(최종보스)

외부 자원을 받을 때 SOP 때문에 제한됨
그래서 나온 것이 CORS가 나옴
CORS는 서버쪽에서 해줘야 하는 것
JSONP는 CORS가 나오기 전에 많이 썼는데 보안 문제가 있어서 서버 우회나 대리 서버를 통하 우회를 많이 씀
